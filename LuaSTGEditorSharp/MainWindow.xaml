<Window x:Name="window" x:Class="LuaSTGEditorSharp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:LuaSTGEditorSharp"
        xmlns:cm="clr-namespace:System.ComponentModel;assembly=System"
        xmlns:tool="clr-namespace:LuaSTGEditorSharp.Toolbox"
        xmlns:tb="clr-namespace:LuaSTGEditorSharp.Plugin;assembly=LuaSTGEditorSharp.Core"
        xmlns:om="clr-namespace:System.Collections.Generic;assembly=mscorlib"
        xmlns:adonisUi="clr-namespace:AdonisUI;assembly=AdonisUI"
        mc:Ignorable="d"
        Title="LuaSTG Editor Sharp X v0.78.8"
        Height="679.6"
        Width="800"
        WindowState="Maximized"
        Closing="Window_Closing">
    <Window.Style>
        <Style TargetType="Window" BasedOn="{StaticResource {x:Type Window}}">
            <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer0BackgroundBrush}}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer0BackgroundBrush}}"/>
        </Style>
    </Window.Style>
    <Window.CommandBindings>
        <!--#region File -->
        <CommandBinding Command="ApplicationCommands.New" Executed="NewCommandExecuted"/>
        <CommandBinding Command="ApplicationCommands.Open" Executed="OpenCommandExecuted"/>
        <CommandBinding Command="local:EditorRoutedCommands.OpenRecent" Executed="OpenRecentCommandExecuted"/>
        <CommandBinding Command="ApplicationCommands.Save" Executed="SaveCommandExecuted" CanExecute="SaveCommand_CanExecute"/>
        <CommandBinding Command="ApplicationCommands.SaveAs" Executed="SaveAsCommandExecuted" CanExecute="SaveAsCommand_CanExecute"/>
        <CommandBinding Command="ApplicationCommands.Close" Executed="CloseCommandExecuted" CanExecute="CloseCommand_CanExecute"/>
        <!--#endregion-->
        <!--#region Edit -->
        <CommandBinding Command="ApplicationCommands.Undo" Executed="UndoCommandExecuted" CanExecute="UndoCommand_CanExecute"/>
        <CommandBinding Command="ApplicationCommands.Redo" Executed="RedoCommandExecuted" CanExecute="RedoCommand_CanExecute"/>
        <CommandBinding Command="ApplicationCommands.Cut" Executed="CutCommandExecuted" CanExecute="CutCommand_CanExecute"/>
        <CommandBinding Command="ApplicationCommands.Copy" Executed="CopyCommandExecuted" CanExecute="CopyCommand_CanExecute"/>
        <CommandBinding Command="ApplicationCommands.Paste" Executed="PasteCommandExecuted" CanExecute="PasteCommand_CanExecute"/>
        <CommandBinding Command="ApplicationCommands.Delete" Executed="DeleteCommandExecuted" CanExecute="DeleteCommand_CanExecute"/>
        <CommandBinding Command="local:EditorRoutedCommands.EditNode" Executed="EditNodeCommandExecuted" CanExecute="EditNodeCommand_CanExecute"/>
        <CommandBinding Command="local:EditorRoutedCommands.FoldTree" Executed="FoldTreeCommandExecuted" CanExecute="FoldTreeCommand_CanExecute"/>
        <CommandBinding Command="local:EditorRoutedCommands.UnfoldTree" Executed="UnfoldTreeCommandExecuted" CanExecute="UnfoldTreeCommand_CanExecute"/>
        <CommandBinding Command="local:EditorRoutedCommands.FoldRegion" Executed="FoldRegionCommandExecuted" CanExecute="FoldRegionCommand_CanExecute"/>
        <CommandBinding Command="local:EditorRoutedCommands.UnfoldAsRegion" Executed="UnfoldAsRegionCommandExecuted" CanExecute="UnfoldAsRegionCommand_CanExecute"/>
        <CommandBinding Command="local:EditorRoutedCommands.SwitchBan" Executed="SwitchBanCommandExecuted" CanExecute="SwitchBanCommand_CanExecute"/>
        <CommandBinding Command="local:EditorRoutedCommands.GoToDef" Executed="GoToDefCommandExecuted" CanExecute="GoToDefCommand_CanExecute"/>
        <!--#endregion-->
        <!--#region Tools-->
        <CommandBinding Command="local:EditorRoutedCommands.FixNodeAttributes" Executed="FixAttributeCommandExecuted"/>
        <CommandBinding Command="local:EditorRoutedCommands.LibraryTools" Executed="LibraryToolsCommandExecuted"/>
        <!--#endregion-->
        <!--#region Export-->
        <CommandBinding Command="local:EditorRoutedCommands.ViewCode" Executed="ViewCodeCommandExecuted" CanExecute="ViewCodeCommand_CanExecute"/>
        <CommandBinding Command="local:EditorRoutedCommands.ExportCode" Executed="ExportCodeCommandExecuted" CanExecute="ExportCodeCommand_CanExecute"/>
        <CommandBinding Command="local:EditorRoutedCommands.ExportZip" Executed="ExportZipCommandExecuted" CanExecute="ExportZipCommand_CanExecute"/>
        <CommandBinding Command="local:EditorRoutedCommands.RunProject" Executed="RunProjectCommandExecuted" CanExecute="RunProjectCommand_CanExecute"/>
        <CommandBinding Command="local:EditorRoutedCommands.SCDebug" Executed="SCDebugCommandExecuted" CanExecute="SCDebugCommand_CanExecute"/>
        <CommandBinding Command="local:EditorRoutedCommands.StageDebug" Executed="StageDebugCommandExecuted" CanExecute="StageDebugCommand_CanExecute"/>
        <!--#endregion-->
        <CommandBinding Command="local:EditorRoutedCommands.InsertPreset" Executed="InsertPresetCommandExecuted" CanExecute="InsertPresetCommand_CanExecute"/>
        <CommandBinding Command="local:EditorRoutedCommands.SavePreset" Executed="SavePresetCommandExecuted" CanExecute="SavePresetCommand_CanExecute"/>
        <CommandBinding Command="local:EditorRoutedCommands.RefreshPreset" Executed="RefreshPresetCommandExecuted"/>
        <CommandBinding Command="local:EditorRoutedCommands.SwitchBefore" Executed="SwitchBeforeCommandExecuted"/>
        <CommandBinding Command="local:EditorRoutedCommands.SwitchAfter" Executed="SwitchAfterCommandExecuted"/>
        <CommandBinding Command="local:EditorRoutedCommands.SwitchChild" Executed="SwitchChildCommandExecuted"/>
        <CommandBinding Command="local:EditorRoutedCommands.SwitchParent" Executed="SwitchParentCommandExecuted"/>
        <!--#region View-->
        <CommandBinding Command="local:EditorRoutedCommands.ViewFileFolder" Executed="ViewFileFolderCommandExecuted" CanExecute="ViewFileFolderCommand_CanExecute"/>
        <CommandBinding Command="local:EditorRoutedCommands.ViewModFolder" Executed="ViewModFolderCommandExecuted" CanExecute="ViewModFolderCommand_CanExecute"/>
        <CommandBinding Command="local:EditorRoutedCommands.ViewDefinition" Executed="ViewDefinitionCommandExecuted" CanExecute="ViewDefinitionCommand_CanExecute"/>
        <!--#endregion-->
        <CommandBinding Command="local:EditorRoutedCommands.Settings" Executed="SettingsCommandExecuted"/>
        <CommandBinding Command="local:EditorRoutedCommands.OpenMarketplace" Executed="OpenMarketplaceExecuted"/>
        <CommandBinding Command="local:EditorRoutedCommands.AboutNode" Executed="AboutNodeCommandExecuted"/>
    </Window.CommandBindings>
    <Window.Resources>
        <!--#region Base style-->
        <tool:ToolboxContentTemplateSelector x:Key="ToolboxContentTemplateSelector"/>
        <tool:ToolboxTemplateSelector x:Key="ToolboxTemplateSelector"/>
        <DataTemplate x:Key="ToolboxSeperator" DataType="{x:Type tb:ToolboxItemData}">
            <Separator Margin="5,2"/>
        </DataTemplate>
        <DataTemplate x:Key="ToolboxButton" DataType="{x:Type tb:ToolboxItemData}">
            <Button Tag="{Binding Tag}" Click="ButtonAdd_Click" Padding="4">
                <Button.Content>
                    <Image Source="{tool:BindableStaticResource {Binding Image}}" Stretch="Fill" Width="24" Height="24"/>
                </Button.Content>
                <Button.ToolTip>
                    <ToolTip>
                        <TextBlock Text="{Binding ToolTip}"/>
                    </ToolTip>
                </Button.ToolTip>
            </Button>
        </DataTemplate>
        <DataTemplate x:Key="ToolboxContent">
            <ItemsControl ItemsSource="{Binding Data}" ItemTemplateSelector="{StaticResource ToolboxContentTemplateSelector}"
                          Margin="-7, -8, -7, -7">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
        </DataTemplate>
        <ControlTemplate x:Key="DetailedTemplatex" TargetType="ComboBoxItem">
            <StackPanel Orientation="Horizontal">
                <Image Source="{Binding Path=Icon}" Height="16" Width="16" Stretch="Fill"/>
                <TextBlock Text="{Binding Path=Name}"/>
            </StackPanel>
        </ControlTemplate>
        <tool:BannedToStrikeThrough x:Key="banned2Strike"/>
        <tool:BoolToOpacity x:Key="banned2Opacity"/>
        <cm:BackgroundWorker x:Key="CompileWorker" WorkerReportsProgress="True"
                             DoWork="BeginPackaging"
                             ProgressChanged="PackageProgressReport"
                             RunWorkerCompleted="FinishPackaging"
                             />
        <!--#endregion-->
        <!--#region Linked Tree Style-->
        <tool:TreeViewLineConverter x:Key="TreeViewLineConverter"/>
        <SolidColorBrush x:Key="TreeViewItem.Selected.Inactive.Background" Color="Transparent"/>
        <SolidColorBrush x:Key="TreeViewItem.Selected.Inactive.Border" Color="#FF000000"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF000000"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF000000"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FFCCEEFB"/>
        <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181"/>
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Width" Value="16"/>
            <Setter Property="Height" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                            <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}"
                                  Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}"
                                  Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="RenderTransform" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Fill}"/>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Fill}"/>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsChecked" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Fill}"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TreeViewItemFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Rectangle Margin="0,0,0,0"
                                       StrokeThickness="5"
                                       Stroke="Black"
                                       StrokeDashArray="1 2"
                                       Opacity="0"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="DottedTreeViewItem"
               TargetType="{x:Type TreeViewItem}">
            <Setter Property="Background"
                    Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment"
                    Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment"
                    Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Padding"
                    Value="1,0,0,0"/>
            <Setter Property="Foreground"
                    Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
            <Setter Property="FocusVisualStyle"
                    Value="{StaticResource TreeViewItemFocusVisual}"/>
            <Setter Property="IsExpanded" 
                    Value="{Binding Path=IsExpanded, Mode=TwoWay}"/>
            <Setter Property="IsSelected" 
                    Value="{Binding Path=IsSelected, Mode=TwoWay}"/>
            <EventSetter Event="PreviewMouseRightButtonDown" 
                         Handler="TreeViewItem_PreviewMouseRightButtonDown"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19"
                                                  Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>

                            <Rectangle x:Name="HorLn" Height="1" VerticalAlignment="Top" StrokeDashArray="4 4"
                                       HorizontalAlignment="Stretch" Stroke="#8888" Margin="9,9,0,0"
                                       SnapsToDevicePixels="True"/>
                            <Rectangle x:Name="VerLn" Width="1" VerticalAlignment="Stretch" StrokeDashArray="4 4"
                                       HorizontalAlignment="Center" Stroke="#8888" Grid.RowSpan="2"
                                       SnapsToDevicePixels="True"/>

                            <ToggleButton x:Name="Expander"
                                          Style="{StaticResource ExpandCollapseToggleStyle}"
                                          IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                          ClickMode="Press"/>
                            <Border Name="Bd"
                                    Grid.Column="1"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}">
                                <ContentPresenter x:Name="PART_Header"
                                                  ContentSource="Header"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>

                            </Border>
                            <ItemsPresenter x:Name="ItemsHost"
                                            Grid.Row="1"
                                            Grid.Column="1"
                                            Grid.ColumnSpan="2"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded"
                                     Value="False">
                                <Setter TargetName="ItemsHost"
                                        Property="Visibility"
                                        Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="HasItems"
                                     Value="False">
                                <Setter TargetName="Expander"
                                        Property="Visibility"
                                        Value="Hidden"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader"
                                               Value="False"/>
                                    <Condition Property="Width"
                                               Value="Auto"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_Header"
                                        Property="MinWidth"
                                        Value="75"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader"
                                               Value="False"/>
                                    <Condition Property="Height"
                                               Value="Auto"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_Header"
                                        Property="MinHeight"
                                        Value="19"/>
                            </MultiTrigger>
                            <Trigger Property="IsSelected"
                                     Value="True">
                                <Setter TargetName="Bd"
                                        Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentForegroundBrush}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected"
                                               Value="true"/>
                                    <Condition Property="IsSelectionActive"
                                               Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Bd"
                                        Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentForegroundBrush}}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled"
                                     Value="false">
                                <Setter Property="Foreground"
                                        Value="{DynamicResource {x:Static adonisUi:Brushes.DisabledForegroundBrush}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="RadioButton" x:Key="CustomRadioButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border x:Name="border"
                                Background="Transparent"
                                BorderBrush="Transparent"
                                BorderThickness="1">
                            <ContentPresenter x:Name="Content"
                                      Margin="{TemplateBinding Padding}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      RecognizesAccessKey="True"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#446C9CF6"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="#446C9CF6"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Cursor" Value="Hand"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="#446C9CF6"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
            <Setter Property="Padding" Value="5,0"/>
        </Style>
        <Style x:Key="DataGridFix" TargetType="DataGrid">
            <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1BackgroundBrush}}"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1BorderBrush}}"/>
        </Style>
        <Style TargetType="TabControl" BasedOn="{StaticResource {x:Type TabControl}}">
            <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer0BackgroundBrush}}"/>
        </Style>
        <!--#endregion-->
    </Window.Resources>
    <DockPanel>
        <Border DockPanel.Dock="Top">
            <Menu>
                <MenuItem Header="_File">
                    <MenuItem Header="_New" Command="ApplicationCommands.New">
                        <MenuItem.Icon>
                            <Image Source="images/new.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Open" Command="ApplicationCommands.Open">
                        <MenuItem.Icon>
                            <Image Source="images/open.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Open Recent" x:Name="RecentlyOpenedMenu" Command="local:EditorRoutedCommands.OpenRecent">
                        <MenuItem.Icon>
                            <Image Source="images/open.png"/>
                        </MenuItem.Icon>
                        <MenuItem.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding}"/>
                            </DataTemplate>
                        </MenuItem.ItemTemplate>
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="MenuItem">
                                <Setter Property="Command" Value="local:EditorRoutedCommands.OpenRecent"/>
                                <Setter Property="CommandParameter" Value="{Binding}"/>
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Header="_Save" Command="ApplicationCommands.Save">
                        <MenuItem.Icon>
                            <Image Source="images/save.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Save as" Command="ApplicationCommands.SaveAs"/>
                    <Separator/>
                    <MenuItem Header="_Close" Command="ApplicationCommands.Close"/>
                </MenuItem>
                <MenuItem Header="_Edit">
                    <MenuItem Header="_Edit..." Command="local:EditorRoutedCommands.EditNode"/>
                    <Separator/>
                    <MenuItem Header="_Undo" Command="ApplicationCommands.Undo">
                        <MenuItem.Icon>
                            <Image Source="images/undo.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Redo" Command="ApplicationCommands.Redo">
                        <MenuItem.Icon>
                            <Image Source="images/redo.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Header="_Cut" Command="ApplicationCommands.Cut">
                        <MenuItem.Icon>
                            <Image Source="images/cut.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Copy" Command="ApplicationCommands.Copy">
                        <MenuItem.Icon>
                            <Image Source="images/copy.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Paste" Command="ApplicationCommands.Paste">
                        <MenuItem.Icon>
                            <Image Source="images/paste.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Header="_Delete" Command="ApplicationCommands.Delete">
                        <MenuItem.Icon>
                            <Image Source="images/delete.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Header="_Switch Ban" Command="local:EditorRoutedCommands.SwitchBan"/>
                    <Separator/>
                    <MenuItem Header="_Fold Tree" Command="local:EditorRoutedCommands.FoldTree"/>
                    <MenuItem Header="_Unfold Tree" Command="local:EditorRoutedCommands.UnfoldTree"/>
                    <Separator/>
                    <MenuItem Header="_Fold region" Command="local:EditorRoutedCommands.FoldRegion">
                        <MenuItem.Icon>
                            <Image Source="images/foldregion.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Unfold as region" Command="local:EditorRoutedCommands.UnfoldAsRegion">
                        <MenuItem.Icon>
                            <Image Source="images/unfoldasregion.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Header="_Go to Definition" Command="local:EditorRoutedCommands.GoToDef"/>
                </MenuItem>
                <MenuItem Header="_Tools">
                    <MenuItem Header="_Refactor..."/>
                    <Separator/>
                    <MenuItem Header="_Fix node attributes" Command="local:EditorRoutedCommands.FixNodeAttributes"/>
                    <Separator/>
                    <MenuItem x:Name="libTools" Header="_Library tools...">
                        <MenuItem.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Name}"/>
                            </DataTemplate>
                        </MenuItem.ItemTemplate>
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="MenuItem">
                                <Setter Property="Command" Value="local:EditorRoutedCommands.LibraryTools"/>
                                <Setter Property="CommandParameter" Value="{Binding}"/>
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="_Insert">
                    <MenuItem Header="_Before" Command="local:EditorRoutedCommands.SwitchBefore" 
                              IsChecked="{Binding IsBeforeState, ElementName=window, Mode=OneWay}">
                        <MenuItem.Icon>
                            <Image Source="images/up.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_After" Command="local:EditorRoutedCommands.SwitchAfter" 
                              IsChecked="{Binding IsAfterState, ElementName=window, Mode=OneWay}">
                        <MenuItem.Icon>
                            <Image Source="images/down.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Child" Command="local:EditorRoutedCommands.SwitchChild" 
                              IsChecked="{Binding IsChildState, ElementName=window, Mode=OneWay}">
                        <MenuItem.Icon>
                            <Image Source="images/child.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Parent" Command="local:EditorRoutedCommands.SwitchParent" 
                              IsChecked="{Binding IsParentState, ElementName=window, Mode=OneWay}">
                        <MenuItem.Icon>
                            <Image Source="images/parent.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="_Preset">
                    <MenuItem Header="_Presets..." x:Name="presetsMenu" Command="local:EditorRoutedCommands.InsertPreset">
                        <MenuItem.ItemTemplate>
                            <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                                <TextBlock Text="{Binding Name}"/>
                            </HierarchicalDataTemplate>
                        </MenuItem.ItemTemplate>
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="MenuItem">
                                <Setter Property="Command" Value="local:EditorRoutedCommands.InsertPreset"/>
                                <Setter Property="CommandParameter" Value="{Binding FullPath}"/>
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <MenuItem Header="_Save preset..." Command="local:EditorRoutedCommands.SavePreset"/>
                    <MenuItem Header="_Refresh preset list" Command="local:EditorRoutedCommands.RefreshPreset"/>
                </MenuItem>
                <MenuItem Header="_Compile">
                    <MenuItem Header="_Run" Command="local:EditorRoutedCommands.RunProject">
                        <MenuItem.Icon>
                            <Image Source="images/run.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Test spell card" Command="local:EditorRoutedCommands.SCDebug">
                        <MenuItem.Icon>
                            <Image Source="images/debugsc.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Test from scene node" Command="local:EditorRoutedCommands.StageDebug">
                        <MenuItem.Icon>
                            <Image Source="images/debugstage.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Pack project" Command="local:EditorRoutedCommands.ExportZip">
                        <MenuItem.Icon>
                            <Image Source="images/pack.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="_View">
                    <MenuItem Header="_File Folder" Command="local:EditorRoutedCommands.ViewFileFolder"/>
                    <MenuItem Header="_Mod Folder" Command="local:EditorRoutedCommands.ViewModFolder"/>
                    <Separator/>
                    <MenuItem Header="_View selected code" Command="local:EditorRoutedCommands.ViewCode"/>
                    <MenuItem Header="_Export all code" Command="local:EditorRoutedCommands.ExportCode"/>
                    <Separator/>
                    <MenuItem Header="_Definitions" Command="local:EditorRoutedCommands.ViewDefinition"/>
                </MenuItem>
                <!--
                <MenuItem Header="_Addons">
                    <MenuItem Header="_Manage Addons" Command="local:EditorRoutedCommands.OpenMarketplace" CommandParameter="0"/>
                    <MenuItem Header="_Presets" Command="local:EditorRoutedCommands.OpenMarketplace" CommandParameter="1"/>
                    <MenuItem Header="_Nodes" Command="local:EditorRoutedCommands.OpenMarketplace" CommandParameter="2"/>
                </MenuItem>-->
                <MenuItem Header="_Settings">
                    <MenuItem Header="_General settings" Command="local:EditorRoutedCommands.Settings" CommandParameter="0">
                        <MenuItem.Icon>
                            <Image Source="images/setting.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Compiler settings" Command="local:EditorRoutedCommands.Settings" CommandParameter="1"/>
                    <MenuItem Header="_Debug settings" Command="local:EditorRoutedCommands.Settings" CommandParameter="2"/>
                    <MenuItem Header="_Editor settings" Command="local:EditorRoutedCommands.Settings" CommandParameter="3"/>
                </MenuItem>
                <MenuItem Header="_Help">
                    <MenuItem Header="_Nodes" Command="local:EditorRoutedCommands.AboutNode"/>
                    <MenuItem Header="_Update Log" Click="UpdateLog_Click"/>
                    <MenuItem Header="_Check for Updates" Click="CheckForUpdates_Click"/>
                </MenuItem>
            </Menu>
        </Border>
        <Border DockPanel.Dock="Top">
            <ToolBarTray>
                <ToolBar Grid.ColumnSpan="3" VerticalAlignment="Top">
                    <Button Command="ApplicationCommands.New">
                        <Button.Content>
                            <Image Source="images/new.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="New File (Ctrl+N)"/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Button Command="ApplicationCommands.Open">
                        <Button.Content>
                            <Image Source="images/open.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Open File (Ctrl+O)"/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Button Command="ApplicationCommands.Save">
                        <Button.Content>
                            <Image Source="images/save.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Save File (Ctrl+S)"/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Separator/>
                    <Button Command="local:EditorRoutedCommands.ViewCode">
                        <Button.Content>
                            <Image Source="images/viewcode.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="View code in this node (Alt+C)"/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Button Command="local:EditorRoutedCommands.ExportCode">
                        <Button.Content>
                            <Image Source="images/savecode.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Export Code"/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Separator/>
                    <Button Command="ApplicationCommands.Undo">
                        <Button.Content>
                            <Image Source="images/Undo.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Undo (Ctrl+Z)"/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Button Command="ApplicationCommands.Redo">
                        <Button.Content>
                            <Image Source="images/redo.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Redo (Ctrl+Y)"/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Separator/>
                    <Button Command="ApplicationCommands.Cut">
                        <Button.Content>
                            <Image Source="images/cut.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Cut (Ctrl+X)"/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Button Command="ApplicationCommands.Copy">
                        <Button.Content>
                            <Image Source="images/copy.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Copy (Ctrl+C)"/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Button Command="ApplicationCommands.Paste">
                        <Button.Content>
                            <Image Source="images/paste.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Paste (Ctrl+V)"/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Separator/>
                    <Button Command="ApplicationCommands.Delete">
                        <Button.Content>
                            <Image Source="images/delete.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Delete (Del)"/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Separator/>
                    <Button Command="local:EditorRoutedCommands.FoldRegion">
                        <Button.Content>
                            <Image Source="images/foldregion.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Fold Region (Ctrl+G)"/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Button Command="local:EditorRoutedCommands.UnfoldAsRegion">
                        <Button.Content>
                            <Image Source="images/unfoldasregion.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Unfold As Region (Ctrl+U)"/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Separator/>
                    <Button Command="local:EditorRoutedCommands.ExportZip">
                        <Button.Content>
                            <Image Source="images/pack.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Pack Project"/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Button Command="local:EditorRoutedCommands.RunProject">
                        <Button.Content>
                            <Image Source="images/run.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Run Project (F5)"/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Button Command="local:EditorRoutedCommands.SCDebug">
                        <Button.Content>
                            <Image Source="images/debugsc.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Test SpellCard (F6)"/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Button Command="local:EditorRoutedCommands.StageDebug">
                        <Button.Content>
                            <Image Source="images/debugstage.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Test Stage Node (F7)"/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Separator/>
                    <TextBox x:Name="TxtLine" Width="40" KeyDown="TxtLine_KeyDown"/>
                    <Button Command="local:EditorRoutedCommands.GoToLineX" 
                            CommandParameter="{Binding Text, ElementName=TxtLine, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <Button.Content>
                            <Image Source="images/find.png" Stretch="Fill" Width="24" Height="24"/>
                        </Button.Content>
                        <Button.CommandBindings>
                            <CommandBinding Command="local:EditorRoutedCommands.GoToLineX" Executed="GoToLineXCommandExecuted" CanExecute="GoToLineXCommand_CanExecute"/>
                        </Button.CommandBindings>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Go to Line..."/>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Separator/>
                    <RadioButton Command="local:EditorRoutedCommands.SwitchAfter"
                                 IsChecked="{Binding IsAfterState, ElementName=window, Mode=OneWay}"
                                 Style="{StaticResource CustomRadioButton}">
                        <RadioButton.Content>
                            <Image Source="images/down.png" Stretch="Fill" Width="24" Height="24"/>
                        </RadioButton.Content>
                        <RadioButton.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Insert After (Alt+Down)"/>
                            </ToolTip>
                        </RadioButton.ToolTip>
                    </RadioButton>
                    <RadioButton Command="local:EditorRoutedCommands.SwitchBefore"
                                 IsChecked="{Binding IsBeforeState, ElementName=window, Mode=OneWay}"
                                 Style="{StaticResource CustomRadioButton}">
                        <RadioButton.Content>
                            <Image Source="images/Up.png" Stretch="Fill" Width="24" Height="24"/>
                        </RadioButton.Content>
                        <RadioButton.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Insert Before (Alt+Up)"/>
                            </ToolTip>
                        </RadioButton.ToolTip>
                    </RadioButton>
                    <RadioButton Command="local:EditorRoutedCommands.SwitchChild"
                                 IsChecked="{Binding IsChildState, ElementName=window, Mode=OneWay}"
                                 Style="{StaticResource CustomRadioButton}">
                        <RadioButton.Content>
                            <Image Source="images/child.png" Stretch="Fill" Width="24" Height="24"/>
                        </RadioButton.Content>
                        <RadioButton.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Insert As Child (Alt+Right)"/>
                            </ToolTip>
                        </RadioButton.ToolTip>
                    </RadioButton>
                    <RadioButton Command="local:EditorRoutedCommands.SwitchParent"
                                 IsChecked="{Binding IsParentState, ElementName=window, Mode=OneWay}"
                                 Style="{StaticResource CustomRadioButton}">
                        <RadioButton.Content>
                            <Image Source="images/parent.png" Stretch="Fill" Width="24" Height="24"/>
                        </RadioButton.Content>
                        <RadioButton.ToolTip>
                            <ToolTip>
                                <TextBlock Text="Insert As Parent (Alt+Left)"/>
                            </ToolTip>
                        </RadioButton.ToolTip>
                    </RadioButton>
                </ToolBar>
            </ToolBarTray>
        </Border>
        <Border DockPanel.Dock="Top">
            <TabControl ContentTemplateSelector="{StaticResource ToolboxTemplateSelector}">
                <TabControl.Resources>
                    <CollectionViewSource x:Key="ToolboxData" Source="{Binding ToolboxData, ElementName=window}"/>
                    <Style TargetType="ContentPresenter">
                        <Setter Property="Margin" Value="0"/>
                    </Style>
                </TabControl.Resources>
                <TabControl.ItemsSource>
                    <CompositeCollection>
                        <CollectionContainer Collection="{Binding Source={StaticResource ToolboxData}}"/>
                        <TabItem>
                            <TabItem.Header>
                                <Image Source="images/search.png" Height="10" Width="10" Stretch="Fill"/>
                            </TabItem.Header>
                            <ComboBox x:Name="comboDict" IsDropDownOpen="True" IsTextSearchEnabled="False" IsEditable="True" Height="28"
                                      KeyUp="ComboDict_KeyUp" GotKeyboardFocus="ComboDict_GotKeyboardFocus">
                                <ComboBox.ItemTemplateSelector>
                                    <tool:ComboBoxItemTemplateSelector>
                                        <tool:ComboBoxItemTemplateSelector.DropDownTemplate>
                                            <DataTemplate>
                                                <StackPanel Orientation="Horizontal">
                                                    <Image Source="{Binding Path=Icon}" Height="16" Width="16" Stretch="Fill"/>
                                                    <TextBlock Text="{Binding Path=Name}"/>
                                                </StackPanel>
                                            </DataTemplate>
                                        </tool:ComboBoxItemTemplateSelector.DropDownTemplate>
                                    </tool:ComboBoxItemTemplateSelector>
                                </ComboBox.ItemTemplateSelector>
                            </ComboBox>
                        </TabItem>
                    </CompositeCollection>
                </TabControl.ItemsSource>
                <TabControl.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Header}"/>
                    </DataTemplate>
                </TabControl.ItemTemplate>
            </TabControl>
        </Border>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="5"/>
                <ColumnDefinition Width="3.8*"/>
            </Grid.ColumnDefinitions>
            <DataGrid x:Name="propData" Margin="10,10,4,11.2" AutoGenerateColumns="False"
                      CanUserResizeRows="False" CanUserAddRows="False"
                      Grid.Column="0" ItemsSource="{Binding ContentTemplate.VisualTree, ElementName=docTabs}" 
                      VerticalScrollBarVisibility="Visible"
                      DataGridCell.Selected="DataGrid_GotFocus"
                      CanUserDeleteRows="False"
                      Style="{StaticResource DataGridFix}"
                      HorizontalGridLinesBrush="{DynamicResource {x:Static adonisUi:Brushes.Layer1BorderBrush}}"
                      VerticalGridLinesBrush="{DynamicResource {x:Static adonisUi:Brushes.Layer1BorderBrush}}">
                <DataGrid.CellStyle>
                    <Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
                        <Setter Property="BorderThickness" Value="0"/>
                    </Style>
                </DataGrid.CellStyle>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Properties" Binding="{Binding Path=AttrCap}" IsReadOnly="True">
                        <DataGridTextColumn.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2BorderBrush}}"/>
                            </Style>
                        </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <DataGridTemplateColumn Header="Parameters" Width="100">
                        <DataGridTemplateColumn.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Setter Property="Background"
                                        Value="{DynamicResource {x:Static adonisUi:Brushes.Layer0BackgroundBrush}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
                            </Style>
                        </DataGridTemplateColumn.CellStyle>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Path=AttrInput_InvokeCommand, UpdateSourceTrigger=Default, Mode=TwoWay}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <ComboBox IsEditable="True" HorizontalAlignment="Stretch"  VerticalAlignment="Stretch"
                                          Height="20" Loaded="ComboBox_Loaded" BorderThickness="0" 
                                          IsTextSearchEnabled="False" Padding="0, 0, 10, 0"
                                          Text="{Binding Path=AttrInput_InvokeCommand, UpdateSourceTrigger=LostFocus, Mode=TwoWay}"
                                          Tag="{Binding Path=EditWindow}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn CanUserResize="False" IsReadOnly="True">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Button Content="..." Width="25" 
                                        Command="local:EditorRoutedCommands.AdjustProp" CommandParameter="{Binding Path=EditWindow}" 
                                        Tag="{Binding Path=This, UpdateSourceTrigger=PropertyChanged}">
                                    <Button.CommandBindings>
                                        <CommandBinding Command="local:EditorRoutedCommands.AdjustProp" Executed="AdjustPropCommandExecuted"/>
                                    </Button.CommandBindings>
                                </Button>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>
            <GridSplitter Grid.Column="1" HorizontalAlignment="Stretch" Opacity="0"/>
            <Grid Grid.Column="2">
                <Grid.RowDefinitions>
                    <RowDefinition Height="4*" MinHeight="50"/>
                    <RowDefinition Height="5"/>
                    <RowDefinition Height="1.2*" MinHeight="50"/>
                </Grid.RowDefinitions>
                <TabControl Grid.Row="2" Margin="0.6,4,9.6,10"
                            Background="{DynamicResource {x:Static adonisUi:Brushes.Layer1BackgroundBrush}}">
                    <TabItem x:Name="tabMessage" Header="Message">
                        <DataGrid x:Name="EditorConsole" VerticalScrollBarVisibility="Visible" AutoGenerateColumns="False"
                                  IsReadOnly="True" CanUserAddRows="False"
                                  Style="{StaticResource DataGridFix}">
                            <DataGrid.Columns>
                                <DataGridTemplateColumn CanUserResize="False">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <Image Height="12" Width="12" Stretch="Fill" Source="{Binding Path=Icon}"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTextColumn Width="400" Header="Message" Binding="{Binding Path=Message}"/>
                                <DataGridTextColumn Width="100" Header="Trace" Binding="{Binding Path=SourceName}"/>
                            </DataGrid.Columns>
                            <DataGrid.ItemContainerStyle>
                                <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
                                    <Setter Property="Tag" Value="{Binding Path=This}"/>
                                    <EventSetter Event="MouseDoubleClick" Handler="EditorConsoleRow_MouseDoubleClick"/>
                                </Style>
                            </DataGrid.ItemContainerStyle>
                        </DataGrid>
                    </TabItem>
                    <TabItem x:Name="tabOutput" Header="Debug Log">
                        <TextBox x:Name="debugOutput" VerticalScrollBarVisibility="Visible" 
                                 Text="{Binding DebugString, ElementName=window}" IsReadOnly="True"/>
                    </TabItem>
                </TabControl>
                <GridSplitter Grid.Row="1"  HorizontalAlignment="Stretch" Opacity="0"/>
                <TabControl Margin="1,0,9.8,4.4" x:Name="docTabs" Grid.Row="0"
                        ItemsSource="{Binding UpdateSourceTrigger=PropertyChanged}" Grid.RowSpan="2">
                    <TabControl.ItemContainerStyle>
                        <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource {x:Type TabItem}}">
                            <Setter Property="IsSelected"
                                        Value="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>
                        </Style>
                    </TabControl.ItemContainerStyle>
                    <TabControl.ItemTemplate>
                        <DataTemplate>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="35"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="{Binding DocName}" Grid.Column="0"/>
                                <Button Content="X" Grid.Column="1" Margin="4,1,3,2" Click="ButtonCloseFile_Click" 
                                    Background="{x:Null}" BorderBrush="{x:Null}" Tag="{Binding DocHash}"/>
                            </Grid>
                        </DataTemplate>
                    </TabControl.ItemTemplate>
                    <TabControl.ContentTemplate>
                        <DataTemplate>
                            <TreeView x:Name="workSpace" ItemsSource="{Binding TreeNodes}" FontFamily="Terminal"
                                      SelectedItemChanged="WorkSpaceSelectedChanged"
                                      Grid.Column="2" VirtualizingPanel.IsVirtualizing="True"
                                      ItemContainerStyle="{StaticResource DottedTreeViewItem}">
                                <TreeView.ItemTemplate>
                                    <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                                        <StackPanel Orientation="Horizontal">
                                            <Image Source="{tool:BindableStaticResource {Binding Icon}}"
                                                   Stretch="Fill" Width="16" Height="16" Margin="0,0,2,2" VerticalAlignment="Top"
                                                   Opacity="{Binding IsBanned, Converter={StaticResource banned2Opacity}}"/>
                                            <TextBlock VerticalAlignment="Center" Text="{Binding ScreenString}" TextDecorations="{Binding IsBanned, Converter={StaticResource banned2Strike}}"
                                                       />
                                            <StackPanel.ContextMenu>
                                                <ContextMenu DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                                                    <ContextMenu.ItemsSource>
                                                        <CompositeCollection>
                                                            <MenuItem Header="_Edit.." Command="local:EditorRoutedCommands.EditNode"/>
                                                            <Separator/>
                                                            <MenuItem Header="_Cut" Command="ApplicationCommands.Cut"/>
                                                            <MenuItem Header="_Copy" Command="ApplicationCommands.Copy"/>
                                                            <MenuItem Header="_Paste" Command="ApplicationCommands.Paste"/>
                                                            <Separator/>
                                                            <MenuItem Header="_Delete" Command="ApplicationCommands.Delete"/>
                                                            <Separator/>
                                                            <MenuItem Header="_Fold Tree" Command="local:EditorRoutedCommands.FoldTree"/>
                                                            <MenuItem Header="_Unfold Tree" Command="local:EditorRoutedCommands.UnfoldTree"/>
                                                            <Separator/>
                                                            <MenuItem Header="_Go to Definition" Command="local:EditorRoutedCommands.GoToDef"/>
                                                            <Separator/>
                                                            <MenuItem Header="_Replace...">
                                                                <CollectionContainer x:Name="contextMenuCollectionContainer"/>
                                                            </MenuItem>
                                                            <Separator/>
                                                            <MenuItem Header="_Ban" Command="local:EditorRoutedCommands.SwitchBan"
                                                                      IsChecked="{Binding IsBanned, UpdateSourceTrigger=PropertyChanged}"/>
                                                            <Separator/>
                                                            <MenuItem Header="_View Code" Command="local:EditorRoutedCommands.ViewCode"/>
                                                            <Separator/>
                                                            <MenuItem Header="_Save Preset..." Command="local:EditorRoutedCommands.SavePreset"/>
                                                        </CompositeCollection>
                                                    </ContextMenu.ItemsSource>
                                                </ContextMenu>
                                            </StackPanel.ContextMenu>
                                        </StackPanel>
                                    </HierarchicalDataTemplate>
                                </TreeView.ItemTemplate>
                            </TreeView>
                        </DataTemplate>
                    </TabControl.ContentTemplate>
                </TabControl>
            </Grid>
        </Grid>
    </DockPanel>
</Window>